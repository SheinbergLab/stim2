name: Release for macOS

on:
  push:
    tags:
      - '*'

jobs:

  release-stim2:

    # Build on not-the-latest to keep dependency versions modest.
    runs-on: macos-14

    permissions:
      contents: write

    steps:

      - name: Install cmake build tool and dependencies.
        run: |
          brew update
          brew install cmake tcl-tk@9 glm

      - name: Check out our code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build and install GLFW static lib
        run: |
          cd deps/glfw/
          cmake -B build-full-static -D GLFW_BUILD_WAYLAND=ON -D GLFW_BUILD_X11=ON
          cmake --build build-full-static --parallel
          sudo cmake --install build-full-static

      - name: Set up a keychain for Apple code signing.
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          APP_CERTIFICATE_BASE64: ${{ secrets.APPLE_APP_CERTIFICATE_BASE64 }}
        run: |
          # Reconstitute text-encoded secrets as binary .p12 files.
          APP_CERTIFICATE_PATH=$RUNNER_TEMP/developerID_application.p12
          echo -n "$APP_CERTIFICATE_BASE64" | base64 --decode -o $APP_CERTIFICATE_PATH

          # Create a new keychain for use in CI.
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Add our certificates to the keychain.
          security import $APP_CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

          # Alow codesign util and the current user to use this keychain for signing.
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Log info about this keychain for debuging.
          security find-identity -p basic -v

      - name: Build, sign, package, and notarize stim2.
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cmake -B build -G Xcode -D CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM="$TEAM_ID" -D PROJECT_VERSION=${{ github.ref_name }}
          cmake --build build --config Release
          cpack -G DragNDrop --config build/CPackConfig.cmake

          xcrun notarytool store-credentials --apple-id "$APPLE_ID" --team-id "$TEAM_ID" --password "$APPLE_APP_PASSWORD" "stim2-signing"
          xcrun notarytool submit stim2-${{ github.ref_name }}-Darwin.dmg --keychain-profile "stim2-signing" --wait
          xcrun stapler staple stim2-${{ github.ref_name }}-Darwin.dmg

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./*.dmg"
          body: stim2 version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  check-stim2:

    needs: release-stim2

    # Check on latest to confirm compatibility.
    runs-on: macos-15

    steps:

      - name: Install coreutils with timeout util.
        run: |
          brew update
          brew install coreutils

      - name: Install the stim2 package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/stim2-${{ github.ref_name }}-Darwin.dmg
          hdiutil attach stim2-${{ github.ref_name }}-Darwin.dmg
          cp -R /Volumes/stim2-${{ github.ref_name }}-Darwin/stim2.app /Applications
          hdiutil unmount /Volumes/stim2-${{ github.ref_name }}-Darwin

      - name: Sanity check the installed stim2.
        run: |
          timeout --preserve-status --signal SIGINT 2 /Applications/stim2.app/Contents/MacOS/stim2 || echo "$?"
